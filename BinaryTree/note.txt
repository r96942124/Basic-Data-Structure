# Binary-Tree
To practice basic Binary Tree Operation by C++

1. preorder / inorder / postorder by recursive method and stack method
2. preorder / inorder / postorder by stack method
3. levelorder by queue method
4. copy constructor 
5. operator= / operator== 


p.s.

postorder stack method 2
//ref: http://yucoding.blogspot.tw/2013/12/leetcode-question-binary-tree-postorder.html
//The best way => 1. easy understanding & best performance
//從stack取出TOP (依L->R->H 次序取出)
//1. 是否TOP為leaf (尾端 L/R=NULL) 
//2. 是否previois node為rightNode 代表R已經做完 現在在H 所以H->R==R
//3. 是否previois node為leftNode  代表L已經做完 現在在H 所以H->L==L  (這種case H->R是NULL 所以之前stack沒有存)
//=> 紀錄node->val / 設定previous node=topNode
//若以上條件為非 => 代表R/L都尚未處理 若非為NULL 將R/L推到stack

postorder stack method 3
//ref: http://blog.csdn.net/kenden23/article/details/14526023
//     P
//   L   R
//Step1. currentNode=nodeStack.top();
//       1. 從Step3-case.A來 => 代表將新的rightNode取出, 此時leftNode為false, 準備進入Step2開始做新的postorder
//       2. 從Step3-case.B來 => 代表上一個loop的node已經被取出用掉; 此時leftFlge為true, 不能進入Step2 
//                              Case A. rightFlag為true; 代表此node為左右都做完 再進入Stpe3-CaseB印出
//                                      然後進入Step3-CaseD, rightFlag變為false
//                              Case B. rightFlag為false; 進入Step3-CaseA. or Step3-CaseB 
//
//Step2. 檢查 1. leftFlag=false?             => true代表leftNode的postorder已經做完;不能再將left推進stack否則會重複做
//            2. current->leftNode is NULL)? => NULL代表left沒有node可以做postorder
//       => 將leftNode推到stack到底      
//
//Step3. 目前leftNode都已經做完 要檢查rightNode做完沒
//       檢查 1. rightFlag=false?            => true代表rightNode的postorder已經做完 
//            2. current->rightNode is NULL? => NULL代表right沒有node可以做postorder 
//       Case A. rightNode還沒有做過 && current->rightNode有東西
//               所以需要對current->rightNode去做postotder
//               將leftFlag設為false讓其回到Step2能繼續做postorder
//       Case B. B1: rightNode已經做完 or B2: current->rightNode沒有東西
//               => 印出Parent / 將stack裡的Parent移除 
//               => leftFlag設為true  
//               => 檢查 1. stack非空的 
//                          => node上面還有Parent, 可能是其Parent的right or left
//                  檢查 2. nodeStack.top()->rightNode==currentNode ? 
//                          Case C.=> 若currentNode是某parent的right; 代表其Parent的right做完 
//                                    所以將rightFlag設為true; 
//                          Case D.=> 反之代表right還沒做過, 將rightFlag設為false讓其回到Step3 
//                                    去看是否有rightNode能做



